{"version":3,"sources":["webpack:///sdf-parser/webpack/universalModuleDefinition","webpack:///sdf-parser/sdf-parser.min.js","webpack:///sdf-parser/webpack/bootstrap f048769fe04e3269c9f6","webpack:///sdf-parser/./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","parse","sdf","options","only","TypeError","header","substr","crlf","indexOf","sdfParts","split","molecules","labels","start","Date","now","i","length","sdfPart","parts","molecule","push","molfile","j","lines","from","to","label","substring","counter","isNumeric","keep","k","isFinite","currentLabel","minValue","Infinity","maxValue","value","parseFloat","key","always","statistics","statistic","time","Object","keys"],"mappings":"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","file":"sdf-parser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SDFParser\"] = factory();\n\telse\n\t\troot[\"SDFParser\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SDFParser\"] = factory();\n\telse\n\t\troot[\"SDFParser\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction parse(sdf, options) {\n\t    var options=options || {};\n\t    var only=options.only;\n\t    if (typeof sdf !== 'string') {\n\t        throw new TypeError('Parameter \"sdf\" must be a string');\n\t    }\n\t    // we will find the delimiter in order to be much faster and not use regular expression\n\t    var header = sdf.substr(0, 1000);\n\t    var crlf = '\\n';\n\t    if (header.indexOf('\\r\\n') > -1) {\n\t        crlf = '\\r\\n';\n\t    } else if (header.indexOf('\\r') > -1) {\n\t        crlf = '\\r';\n\t    }\n\t\n\t    var sdfParts = sdf.split(crlf + '$$$$' + crlf);\n\t    var molecules = [];\n\t    var labels = {};\n\t\n\t    var start = Date.now();\n\t    \n\t    for (var i=0; i < sdfParts.length; i++) {\n\t        var sdfPart = sdfParts[i];\n\t        var parts = sdfPart.split(crlf + '>');\n\t        if (parts.length > 0 && parts[0].length > 5) {\n\t            var molecule = {};\n\t            molecules.push(molecule);\n\t            molecule.molfile = parts[0] + crlf;\n\t            for (var j = 1; j < parts.length; j++) {\n\t                var lines = parts[j].split(crlf);\n\t                var from = lines[0].indexOf('<');\n\t                var to = lines[0].indexOf('>');\n\t                var label = lines[0].substring(from + 1, to);\n\t                if (labels[label]) {\n\t                    labels[label].counter++;\n\t                } else {\n\t                    labels[label] = {counter: 1, isNumeric: true};\n\t                    if (! only || only.indexOf(label)>-1) {\n\t                        labels[label].keep=true;\n\t                    } else {\n\t                        labels[label].keep=false;\n\t                    }\n\t                }\n\t                if (labels[label].keep) {\n\t                    for (var k = 1; k < lines.length - 1; k++) {\n\t                        if (molecule[label]) {\n\t                            molecule[label] += crlf + lines[k];\n\t                        } else {\n\t                            molecule[label] = lines[k];\n\t                        }\n\t                    }\n\t                    if (labels[label].isNumeric) {\n\t                        if (!isFinite(molecule[label])) {\n\t                            labels[label].isNumeric = false;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // all numeric fields should be converted to numbers\n\t    var numericFields = [];\n\t    for (var label in labels) {\n\t        var currentLabel = labels[label];\n\t        if (currentLabel.isNumeric) {\n\t            currentLabel.minValue = Infinity;\n\t            currentLabel.maxValue = -Infinity;\n\t            for (var j = 0; j < molecules.length; j++) {\n\t                if (molecules[j][label]) {\n\t                    var value = parseFloat(molecules[j][label]);\n\t                    molecules[j][label] = value;\n\t                    if (value > currentLabel.maxValue) currentLabel.maxValue = value;\n\t                    if (value < currentLabel.minValue) currentLabel.minValue = value;\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    // we check that a label is in all the records\n\t    for (var key in labels) {\n\t        if (labels[key].counter === molecules.length) {\n\t            labels[key].always = true;\n\t        } else {\n\t            labels[key].always = false;\n\t        }\n\t    }\n\t\n\t    var statistics = [];\n\t    for (var key in labels) {\n\t        var statistic = labels[key];\n\t        statistic.label = key;\n\t        statistics.push(statistic);\n\t    }\n\t\n\t    return {\n\t        time: Date.now() - start,\n\t        molecules: molecules,\n\t        labels: Object.keys(labels),\n\t        statistics: statistics\n\t    };\n\t\n\t}\n\t\n\tmodule.exports = parse;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** sdf-parser.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f048769fe04e3269c9f6\n **/","'use strict';\n\nfunction parse(sdf, options) {\n    var options=options || {};\n    var only=options.only;\n    if (typeof sdf !== 'string') {\n        throw new TypeError('Parameter \"sdf\" must be a string');\n    }\n    // we will find the delimiter in order to be much faster and not use regular expression\n    var header = sdf.substr(0, 1000);\n    var crlf = '\\n';\n    if (header.indexOf('\\r\\n') > -1) {\n        crlf = '\\r\\n';\n    } else if (header.indexOf('\\r') > -1) {\n        crlf = '\\r';\n    }\n\n    var sdfParts = sdf.split(crlf + '$$$$' + crlf);\n    var molecules = [];\n    var labels = {};\n\n    var start = Date.now();\n    \n    for (var i=0; i < sdfParts.length; i++) {\n        var sdfPart = sdfParts[i];\n        var parts = sdfPart.split(crlf + '>');\n        if (parts.length > 0 && parts[0].length > 5) {\n            var molecule = {};\n            molecules.push(molecule);\n            molecule.molfile = parts[0] + crlf;\n            for (var j = 1; j < parts.length; j++) {\n                var lines = parts[j].split(crlf);\n                var from = lines[0].indexOf('<');\n                var to = lines[0].indexOf('>');\n                var label = lines[0].substring(from + 1, to);\n                if (labels[label]) {\n                    labels[label].counter++;\n                } else {\n                    labels[label] = {counter: 1, isNumeric: true};\n                    if (! only || only.indexOf(label)>-1) {\n                        labels[label].keep=true;\n                    } else {\n                        labels[label].keep=false;\n                    }\n                }\n                if (labels[label].keep) {\n                    for (var k = 1; k < lines.length - 1; k++) {\n                        if (molecule[label]) {\n                            molecule[label] += crlf + lines[k];\n                        } else {\n                            molecule[label] = lines[k];\n                        }\n                    }\n                    if (labels[label].isNumeric) {\n                        if (!isFinite(molecule[label])) {\n                            labels[label].isNumeric = false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // all numeric fields should be converted to numbers\n    var numericFields = [];\n    for (var label in labels) {\n        var currentLabel = labels[label];\n        if (currentLabel.isNumeric) {\n            currentLabel.minValue = Infinity;\n            currentLabel.maxValue = -Infinity;\n            for (var j = 0; j < molecules.length; j++) {\n                if (molecules[j][label]) {\n                    var value = parseFloat(molecules[j][label]);\n                    molecules[j][label] = value;\n                    if (value > currentLabel.maxValue) currentLabel.maxValue = value;\n                    if (value < currentLabel.minValue) currentLabel.minValue = value;\n                }\n            }\n        }\n    }\n\n    // we check that a label is in all the records\n    for (var key in labels) {\n        if (labels[key].counter === molecules.length) {\n            labels[key].always = true;\n        } else {\n            labels[key].always = false;\n        }\n    }\n\n    var statistics = [];\n    for (var key in labels) {\n        var statistic = labels[key];\n        statistic.label = key;\n        statistics.push(statistic);\n    }\n\n    return {\n        time: Date.now() - start,\n        molecules: molecules,\n        labels: Object.keys(labels),\n        statistics: statistics\n    };\n\n}\n\nmodule.exports = parse;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}