{"version":3,"sources":["webpack:///sdf-parser/webpack/universalModuleDefinition","webpack:///sdf-parser/webpack/bootstrap becdab7feccd77873ad4","webpack:///sdf-parser/./src/index.js"],"names":[],"mappings":"AAAA,cACA,2BACA,uCACA,sCACA,IACA,aACA,2CAEA,gBACA,GAAC,mBACD,kBCTA,cAMA,IACA,iBAGA,mBACA,CACA,IACA,KAIA,2CAGA,aAGA,OACA,OAIA,IAzBA,eA4BA,MAGA,mBAA2C,CAAc,QAGzD,qBACA,GACA,kCACA,CACA,gBACA,cAGA,OAGA,iBACA,YACA,qBAA2B,UAA0B,UACrD,YAAiC,CAAe,QAChD,EAEA,aADA,QAIA,mBAAsD,wCAA+D,SAGrH,MAGA,0BChEA,aAuIA,EAAiB,QArIG,aAChB,IAAI,GACJ,MAAI,EAAQ,EACZ,QAAI,EAAQ,EACZ,QAAI,EAAO,EACX,OAAI,EAAU,EACd,cAAI,EAAQ,EACZ,eACI,QADO,gBACD,IAAI,WAGd,uCAAI,GACJ,QAAI,EACA,WAAI,EAAI,QAAQ,QAChB,QAAI,EAAI,QAAQ,MACnB,UAEG,IAAI,GAAS,EAAI,OACjB,OAA6B,CACzB,CADA,GAAO,QAAQ,UAEZ,OAA2B,CAC9B,CADO,GAAO,QAAQ,UAG7B,KAED,KAMK,GAND,GAAW,EAAI,MAAM,GAAI,QAAO,EACpC,qBACA,KAEA,KAAI,EAAQ,KAEZ,MAAS,EAAE,EAAG,EAAI,EAAS,OAAQ,IAC/B,IAAI,GACJ,KAAI,EAAQ,EAAQ,MAAM,EAC1B,QAAmB,CAAf,GAAM,QAAgC,CAAlB,GAAM,GAAG,OAC7B,IACA,MACA,OAAS,QAAU,EACnB,SAAK,GAAI,GAAI,EAAG,EAAI,EAAM,OAAQ,IAC9B,IAAI,GAAc,KAClB,SAAI,EAAO,EAAM,GAAG,QACpB,KAAI,EAAK,EAAM,GAAG,QAClB,KAAI,EAAQ,EAAM,GAAG,UAAU,EAC/B,UACI,QACA,OAAO,KACH,SACA,EACA,aAEJ,SAAI,GAAkC,CAC/B,CADQ,GAAgB,aAClB,IAAkC,CAC3C,CADoB,GAAgB,cAC7B,KACP,QAAc,OAAe,KAAO,SACpC,MAAY,OAAe,KAAO,QAG1C,QAAW,KAAO,KACd,KAAK,GAAI,GAAI,EAAG,EAAI,EAAM,OAAS,EAC/B,IACI,KAAS,MAAU,EAEnB,KAAS,KAGjB,QAAW,KAAO,SACd,IAAI,GAAqB,KAAO,SAChC,MAAoB,YAChB,IAD6B,WAG7B,MAEP,MACD,CAAW,KACP,WAAI,CAAC,SACD,QAAO,KAGlB,aACJ,CACD,IAAM,IAAiB,KACnB,GAEA,YAAK,MAAI,EAAE,EAAG,EAAE,EAAc,OACtB,MACJ,KAAO,KAEd,SACJ,CACJ,CAGD,KAAK,GAAa,QACd,IAAI,GACJ,QAAI,EAAa,UACb,GAAa,SACb,WAAa,SAAW,CACxB,aAAK,GAAI,GAAI,EAAG,EAAI,EAAU,OAC1B,OAAiB,QACb,IAAI,GAAQ,WACZ,SACA,UAAI,EAAQ,EAAa,WAAU,EACnC,YAAI,EAAQ,EAAa,WAAU,EACtC,WAER,CACJ,CAGD,KAAK,GACD,QACW,KAMf,SAPe,KAAK,UAAY,EACxB,WAOR,UAAK,GAAW,QACZ,IAAI,GACJ,OACA,UACH,OAED,OACI,MAAM,KACN,QACA,mBAAQ,OACR,QAGP","file":"sdf-parser.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SDFParser\"] = factory();\n\telse\n\t\troot[\"SDFParser\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap becdab7feccd77873ad4","'use strict';\n\nfunction parse(sdf, options) {\n    var options=options || {};\n    var include=options.include;\n    var exclude=options.exclude;\n    var filter=options.filter;\n    var modifiers=options.modifiers || {};\n    var forEach=options.forEach || {};\n    if (typeof sdf !== 'string') {\n        throw new TypeError('Parameter \"sdf\" must be a string');\n    }\n\n    var eol = '\\n';\n    if (options.mixedEOL) {\n        sdf=sdf.replace(/\\r\\n/g, \"\\n\");\n        sdf=sdf.replace(/\\r/g, \"\\n\");\n    } else {\n        // we will find the delimiter in order to be much faster and not use regular expression\n        var header = sdf.substr(0, 1000);\n        if (header.indexOf('\\r\\n') > -1) {\n            eol = '\\r\\n';\n        } else if (header.indexOf('\\r') > -1) {\n            eol = '\\r';\n        }\n    }\n\n    var sdfParts = sdf.split(new RegExp(eol+'\\\\$\\\\$\\\\$\\\\$.*'+eol));\n    var molecules = [];\n    var labels = {};\n\n    var start = Date.now();\n    \n    for (var i=0; i < sdfParts.length; i++) {\n        var sdfPart = sdfParts[i];\n        var parts = sdfPart.split(eol + '>');\n        if (parts.length > 0 && parts[0].length > 5) {\n            var molecule = {};\n            var currentLabels=[];\n            molecule.molfile = parts[0] + eol;\n            for (var j = 1; j < parts.length; j++) {\n                var lines = parts[j].split(eol);\n                var from = lines[0].indexOf('<');\n                var to = lines[0].indexOf('>');\n                var label = lines[0].substring(from + 1, to);\n                currentLabels.push(label);\n                if (! labels[label]) {\n                    labels[label] = {\n                        counter: 0,\n                        isNumeric: true,\n                        keep:false\n                    };\n                    if (exclude && exclude.indexOf(label)>-1) {\n                    } else if (! include || include.indexOf(label)>-1) {\n                        labels[label].keep=true;\n                        if (modifiers[label]) labels[label].modifier=modifiers[label];\n                        if (forEach[label]) labels[label].forEach=forEach[label];\n                    }\n                }\n                if (labels[label].keep) {\n                    for (var k = 1; k < lines.length - 1; k++) {\n                        if (molecule[label]) {\n                            molecule[label] += eol + lines[k];\n                        } else {\n                            molecule[label] = lines[k];\n                        }\n                    }\n                    if (labels[label].modifier) {\n                        var modifiedValue=labels[label].modifier(molecule[label]);\n                        if (modifiedValue===undefined || modifiedValue===null) {\n                            delete molecule[label];\n                        } else {\n                            molecule[label]=modifiedValue;\n                        }\n                    }\n                    if (labels[label].isNumeric) {\n                        if (!isFinite(molecule[label])) {\n                            labels[label].isNumeric = false;\n                        }\n                    }\n                }\n            }\n            if (! filter || filter(molecule)) {\n                molecules.push(molecule);\n                // only now we can increase the counter\n                for (var j=0; j<currentLabels.length; j++) {\n                    var currentLabel=currentLabels[j];\n                    labels[currentLabel].counter++;\n                }\n            }\n        }\n    }\n\n    // all numeric fields should be converted to numbers\n    for (var label in labels) {\n        var currentLabel = labels[label];\n        if (currentLabel.isNumeric) {\n            currentLabel.minValue = Infinity;\n            currentLabel.maxValue = -Infinity;\n            for (var j = 0; j < molecules.length; j++) {\n                if (molecules[j][label]) {\n                    var value = parseFloat(molecules[j][label]);\n                    molecules[j][label] = value;\n                    if (value > currentLabel.maxValue) currentLabel.maxValue = value;\n                    if (value < currentLabel.minValue) currentLabel.minValue = value;\n                }\n            }\n        }\n    }\n\n    // we check that a label is in all the records\n    for (var key in labels) {\n        if (labels[key].counter === molecules.length) {\n            labels[key].always = true;\n        } else {\n            labels[key].always = false;\n        }\n    }\n\n    var statistics = [];\n    for (var key in labels) {\n        var statistic = labels[key];\n        statistic.label = key;\n        statistics.push(statistic);\n    }\n\n    return {\n        time: Date.now() - start,\n        molecules: molecules,\n        labels: Object.keys(labels),\n        statistics: statistics\n    };\n\n}\n\nmodule.exports = parse;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}